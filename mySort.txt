1. Description
Cycle Sort is a smart sorting algorithm because it tries to do one thing: move each number as few times as possible. Instead of shuffling numbers around over and over, Cycle Sort finds out exactly where each number belongs and only moves it there once—like putting every book directly onto the right shelf, instead of moving it from pile to pile.

For every number in the list, the algorithm check how many other numbers are actually smaller than it. That can tell where this number is supposed to go. If it’s not already in the right spot, the sort swap it into place. And it doesn’t just leave an empty spot. With a new number where it started, so it do the same thing with that one. It keep swapping until it has “cycled” every number in that group to its correct place.

It’s called “Cycle” Sort because of keeping following these little cycles of swaps until everything is where it should be. 

2. Pseudocode
for cycle_start from 0 to n-2:
    item = array[cycle_start]
    pos = cycle_start

    # Find the correct position for item
    for i from cycle_start + 1 to n-1:
        if array[i] < item:
            pos = pos + 1

    # If the item is already in the correct position, skip
    if pos == cycle_start:
        continue

    # Skip duplicates
    while item == array[pos]:
        pos = pos + 1

    # Place the item in its correct position
    if pos != cycle_start:
        swap item with array[pos]

    # Rotate the rest of the cycle
    while pos != cycle_start:
        pos = cycle_start
        for i from cycle_start + 1 to n-1:
            if array[i] < item:
                pos = pos + 1

        while item == array[pos]:
            pos = pos + 1

        if item != array[pos]:
            swap item with array[pos]

3. Counting Analysis
Outer loop: Runs (n - 1) times (for each element except the last).

First inner loop: For each cycle, compares the current element with every other element to find its correct position (up to n-1 comparisons).

Total comparisons: In the worst case, roughly O(n²) comparisons (just like Selection Sort).

Swaps (writes): Exactly as many as there are cycles in the permutation — minimum possible for any sorting algorithm (in the best case, O(n) writes).

Additional comparisons: Handling duplicates can require extra steps for each cycle.

Summary:

Run Time (Time Complexity): O(n²)

Cycle Sort is not the fastest. It needs to check where each item belongs by comparing it to every other item, so as your list grows, the number of comparisons grows a lot. For 100 items, it might do up to 10,000 comparisons. That’s what O(n²) means.

Space (Space Complexity): O(1)

Cycle Sort only uses a tiny, fixed amount of extra memory—basically just a couple of variables to keep track of positions and values while swapping. It doesn’t need to make extra copies of the array or create big helper lists. So no matter how large the data set, it’s always using about the same amount of extra space.


4. Why We Chose Cycle Sort
We selected Cycle Sort because it is unique in minimizing the number of writes, which can be important when writes are expensive. While it is not practical for everyday use compared to faster algorithms like Quick Sort or Merge Sort, Cycle Sort is optimal when the main concern is to reduce the number of times elements are moved.